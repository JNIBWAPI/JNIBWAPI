Compiled from "JNIBWAPI.java"
public class jnibwapi.JNIBWAPI {
  static {};
    Signature: ()V

  public static jnibwapi.JNIBWAPI getInstance();
    Signature: ()Ljnibwapi/JNIBWAPI;

  public jnibwapi.JNIBWAPI(jnibwapi.BWAPIEventListener, boolean);
    Signature: (Ljnibwapi/BWAPIEventListener;Z)V

  public void start();
    Signature: ()V

  public native int getReplayFrameTotal();
    Signature: ()I

  public boolean canIssueCommand(jnibwapi.UnitCommand);
    Signature: (Ljnibwapi/UnitCommand;)Z

  public boolean issueCommand(jnibwapi.UnitCommand);
    Signature: (Ljnibwapi/UnitCommand;)Z

  public native boolean attack(int, int, int);
    Signature: (III)Z

  public native boolean attack(int, int);
    Signature: (II)Z

  public native boolean build(int, int, int, int);
    Signature: (IIII)Z

  public native boolean buildAddon(int, int);
    Signature: (II)Z

  public native boolean train(int, int);
    Signature: (II)Z

  public native boolean morph(int, int);
    Signature: (II)Z

  public native boolean research(int, int);
    Signature: (II)Z

  public native boolean upgrade(int, int);
    Signature: (II)Z

  public native boolean setRallyPoint(int, int, int);
    Signature: (III)Z

  public native boolean setRallyPoint(int, int);
    Signature: (II)Z

  public native boolean move(int, int, int);
    Signature: (III)Z

  public native boolean patrol(int, int, int);
    Signature: (III)Z

  public native boolean holdPosition(int);
    Signature: (I)Z

  public native boolean stop(int);
    Signature: (I)Z

  public native boolean follow(int, int);
    Signature: (II)Z

  public native boolean gather(int, int);
    Signature: (II)Z

  public native boolean returnCargo(int);
    Signature: (I)Z

  public native boolean repair(int, int);
    Signature: (II)Z

  public native boolean burrow(int);
    Signature: (I)Z

  public native boolean unburrow(int);
    Signature: (I)Z

  public native boolean cloak(int);
    Signature: (I)Z

  public native boolean decloak(int);
    Signature: (I)Z

  public native boolean siege(int);
    Signature: (I)Z

  public native boolean unsiege(int);
    Signature: (I)Z

  public native boolean lift(int);
    Signature: (I)Z

  public native boolean land(int, int, int);
    Signature: (III)Z

  public native boolean load(int, int);
    Signature: (II)Z

  public native boolean unload(int, int);
    Signature: (II)Z

  public native boolean unloadAll(int);
    Signature: (I)Z

  public native boolean unloadAll(int, int, int);
    Signature: (III)Z

  public native boolean rightClick(int, int, int);
    Signature: (III)Z

  public native boolean rightClick(int, int);
    Signature: (II)Z

  public native boolean haltConstruction(int);
    Signature: (I)Z

  public native boolean cancelConstruction(int);
    Signature: (I)Z

  public native boolean cancelAddon(int);
    Signature: (I)Z

  public native boolean cancelTrain(int, int);
    Signature: (II)Z

  public native boolean cancelMorph(int);
    Signature: (I)Z

  public native boolean cancelResearch(int);
    Signature: (I)Z

  public native boolean cancelUpgrade(int);
    Signature: (I)Z

  public native boolean useTech(int, int);
    Signature: (II)Z

  public native boolean useTech(int, int, int, int);
    Signature: (IIII)Z

  public native boolean useTech(int, int, int);
    Signature: (III)Z

  public native boolean placeCOP(int, int, int);
    Signature: (III)Z

  public native void drawHealth(boolean);
    Signature: (Z)V

  public native void drawTargets(boolean);
    Signature: (Z)V

  public native void drawIDs(boolean);
    Signature: (Z)V

  public native void enableUserInput();
    Signature: ()V

  public native void enablePerfectInformation();
    Signature: ()V

  public native void setGameSpeed(int);
    Signature: (I)V

  public native void setFrameSkip(int);
    Signature: (I)V

  public native void leaveGame();
    Signature: ()V

  public void drawBox(jnibwapi.Position, jnibwapi.Position, jnibwapi.util.BWColor, boolean, boolean);
    Signature: (Ljnibwapi/Position;Ljnibwapi/Position;Ljnibwapi/util/BWColor;ZZ)V

  public void drawCircle(jnibwapi.Position, int, jnibwapi.util.BWColor, boolean, boolean);
    Signature: (Ljnibwapi/Position;ILjnibwapi/util/BWColor;ZZ)V

  public void drawLine(jnibwapi.Position, jnibwapi.Position, jnibwapi.util.BWColor, boolean);
    Signature: (Ljnibwapi/Position;Ljnibwapi/Position;Ljnibwapi/util/BWColor;Z)V

  public void drawDot(jnibwapi.Position, jnibwapi.util.BWColor, boolean);
    Signature: (Ljnibwapi/Position;Ljnibwapi/util/BWColor;Z)V

  public void drawText(jnibwapi.Position, java.lang.String, boolean);
    Signature: (Ljnibwapi/Position;Ljava/lang/String;Z)V

  public boolean isVisible(jnibwapi.Position);
    Signature: (Ljnibwapi/Position;)Z

  public boolean isExplored(jnibwapi.Position);
    Signature: (Ljnibwapi/Position;)Z

  public boolean isBuildable(jnibwapi.Position, boolean);
    Signature: (Ljnibwapi/Position;Z)Z

  public boolean hasCreep(jnibwapi.Position);
    Signature: (Ljnibwapi/Position;)Z

  public boolean hasPower(jnibwapi.Position);
    Signature: (Ljnibwapi/Position;)Z

  public boolean hasPower(jnibwapi.Position, jnibwapi.types.UnitType);
    Signature: (Ljnibwapi/Position;Ljnibwapi/types/UnitType;)Z

  public boolean hasPower(jnibwapi.Position, int, int);
    Signature: (Ljnibwapi/Position;II)Z

  public boolean hasPower(jnibwapi.Position, int, int, jnibwapi.types.UnitType);
    Signature: (Ljnibwapi/Position;IILjnibwapi/types/UnitType;)Z

  public boolean hasPowerPrecise(jnibwapi.Position);
    Signature: (Ljnibwapi/Position;)Z

  public boolean hasPowerPrecise(jnibwapi.Position, jnibwapi.types.UnitType);
    Signature: (Ljnibwapi/Position;Ljnibwapi/types/UnitType;)Z

  public boolean hasPath(jnibwapi.Position, jnibwapi.Position);
    Signature: (Ljnibwapi/Position;Ljnibwapi/Position;)Z

  protected native boolean hasPath(int, int);
    Signature: (II)Z

  public boolean hasPath(jnibwapi.Unit, jnibwapi.Unit);
    Signature: (Ljnibwapi/Unit;Ljnibwapi/Unit;)Z

  protected native boolean hasPath(int, int, int);
    Signature: (III)Z

  public boolean hasPath(jnibwapi.Unit, jnibwapi.Position);
    Signature: (Ljnibwapi/Unit;Ljnibwapi/Position;)Z

  protected native int[] getLoadedUnits(int);
    Signature: (I)[I

  protected native int[] getInterceptors(int);
    Signature: (I)[I

  protected native int[] getLarva(int);
    Signature: (I)[I

  public boolean canBuildHere(jnibwapi.Position, jnibwapi.types.UnitType, boolean);
    Signature: (Ljnibwapi/Position;Ljnibwapi/types/UnitType;Z)Z

  public boolean canBuildHere(jnibwapi.Unit, jnibwapi.Position, jnibwapi.types.UnitType, boolean);
    Signature: (Ljnibwapi/Unit;Ljnibwapi/Position;Ljnibwapi/types/UnitType;Z)Z

  public boolean canMake(jnibwapi.types.UnitType);
    Signature: (Ljnibwapi/types/UnitType;)Z

  public boolean canMake(jnibwapi.Unit, jnibwapi.types.UnitType);
    Signature: (Ljnibwapi/Unit;Ljnibwapi/types/UnitType;)Z

  public boolean canResearch(jnibwapi.types.TechType);
    Signature: (Ljnibwapi/types/TechType;)Z

  public boolean canResearch(jnibwapi.Unit, jnibwapi.types.TechType);
    Signature: (Ljnibwapi/Unit;Ljnibwapi/types/TechType;)Z

  public boolean canUpgrade(jnibwapi.types.UpgradeType);
    Signature: (Ljnibwapi/types/UpgradeType;)Z

  public boolean canUpgrade(jnibwapi.Unit, jnibwapi.types.UpgradeType);
    Signature: (Ljnibwapi/Unit;Ljnibwapi/types/UpgradeType;)Z

  public native void printText(java.lang.String);
    Signature: (Ljava/lang/String;)V

  public native void sendText(java.lang.String);
    Signature: (Ljava/lang/String;)V

  public native void setLatCom(boolean);
    Signature: (Z)V

  public native void setCommandOptimizationLevel(int);
    Signature: (I)V

  public native boolean isReplay();
    Signature: ()Z

  protected native boolean isVisibleToPlayer(int, int);
    Signature: (II)Z

  public boolean isVisibleToPlayer(jnibwapi.Unit, jnibwapi.Player);
    Signature: (Ljnibwapi/Unit;Ljnibwapi/Player;)Z

  public native int getLastError();
    Signature: ()I

  public native int getRemainingLatencyFrames();
    Signature: ()I

  public jnibwapi.types.UnitType getUnitType(int);
    Signature: (I)Ljnibwapi/types/UnitType;

  public jnibwapi.types.RaceType getRaceType(int);
    Signature: (I)Ljnibwapi/types/RaceType;

  public jnibwapi.types.TechType getTechType(int);
    Signature: (I)Ljnibwapi/types/TechType;

  public jnibwapi.types.UpgradeType getUpgradeType(int);
    Signature: (I)Ljnibwapi/types/UpgradeType;

  public jnibwapi.types.WeaponType getWeaponType(int);
    Signature: (I)Ljnibwapi/types/WeaponType;

  public jnibwapi.types.UnitSizeType getUnitSizeType(int);
    Signature: (I)Ljnibwapi/types/UnitSizeType;

  public jnibwapi.types.BulletType getBulletType(int);
    Signature: (I)Ljnibwapi/types/BulletType;

  public jnibwapi.types.DamageType getDamageType(int);
    Signature: (I)Ljnibwapi/types/DamageType;

  public jnibwapi.types.ExplosionType getExplosionType(int);
    Signature: (I)Ljnibwapi/types/ExplosionType;

  public jnibwapi.types.UnitCommandType getUnitCommandType(int);
    Signature: (I)Ljnibwapi/types/UnitCommandType;

  public jnibwapi.types.OrderType getOrderType(int);
    Signature: (I)Ljnibwapi/types/OrderType;

  public java.util.Collection<jnibwapi.types.UnitType> unitTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.RaceType> raceTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.TechType> techTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.UpgradeType> upgradeTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.WeaponType> weaponTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.UnitSizeType> unitSizeTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.BulletType> bulletTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.DamageType> damageTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.ExplosionType> explosionTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.UnitCommandType> unitCommandTypes();
    Signature: ()Ljava/util/Collection;

  public java.util.Collection<jnibwapi.types.OrderType> orderTypes();
    Signature: ()Ljava/util/Collection;

  public jnibwapi.Player getPlayer(int);
    Signature: (I)Ljnibwapi/Player;

  public jnibwapi.Unit getUnit(int);
    Signature: (I)Ljnibwapi/Unit;

  public int getFrameCount();
    Signature: ()I

  public jnibwapi.Player getSelf();
    Signature: ()Ljnibwapi/Player;

  public jnibwapi.Player getNeutralPlayer();
    Signature: ()Ljnibwapi/Player;

  public java.util.Collection<jnibwapi.Player> getPlayers();
    Signature: ()Ljava/util/Collection;

  public java.util.Set<jnibwapi.Player> getAllies();
    Signature: ()Ljava/util/Set;

  public java.util.Set<jnibwapi.Player> getEnemies();
    Signature: ()Ljava/util/Set;

  public java.util.Collection<jnibwapi.Unit> getAllUnits();
    Signature: ()Ljava/util/Collection;

  public java.util.List<jnibwapi.Unit> getMyUnits();
    Signature: ()Ljava/util/List;

  public java.util.List<jnibwapi.Unit> getAlliedUnits();
    Signature: ()Ljava/util/List;

  public java.util.List<jnibwapi.Unit> getEnemyUnits();
    Signature: ()Ljava/util/List;

  public java.util.List<jnibwapi.Unit> getNeutralUnits();
    Signature: ()Ljava/util/List;

  public java.util.List<jnibwapi.Unit> getStaticNeutralUnits();
    Signature: ()Ljava/util/List;

  public java.util.List<jnibwapi.Unit> getUnits(jnibwapi.Player);
    Signature: (Ljnibwapi/Player;)Ljava/util/List;

  public java.util.List<jnibwapi.Unit> getUnitsOnTile(jnibwapi.Position);
    Signature: (Ljnibwapi/Position;)Ljava/util/List;

  public jnibwapi.Map getMap();
    Signature: ()Ljnibwapi/Map;

  public void keyPressed(int);
    Signature: (I)V

  static int[] $SWITCH_TABLE$jnibwapi$types$EventType();
    Signature: ()[I
}
